<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <service verb="create" noun="GlAccount" type="entity-auto">
        <in-parameters>
            <auto-parameters entity-name="mantle.ledger.account.GlAccount"/>
            <parameter name="glAccountId" default="accountCode"/>
            <parameter name="accountCode" required="true"/>
            <parameter name="accountName" required="true"/>
            <parameter name="glAccountClassEnumId" required="true"/>
            <parameter name="glResourceTypeEnumId" default-value="GlrtMoney"/>
        </in-parameters>
        <out-parameters><parameter name="glAccountId"/></out-parameters>
    </service>

    <service verb="init" noun="PartyAccountingConfiguration">
        <in-parameters>
            <parameter name="sourcePartyId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <auto-parameters entity-name="mantle.ledger.config.PartyAcctgPreference" include="nonpk"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="existingPartyAcctgPreference">
                <field-map field-name="organizationPartyId"/>
            </entity-find-one>
            <if condition="existingPartyAcctgPreference">
                <return message="Party [${organizationPartyId}] already has a PartyAcctgPreference record, so not initializing accounting configuration."/>
            </if>

            <!-- create an error Journal mantle.ledger.transaction.GlJournal -->
            <entity-find-one entity-name="mantle.party.Organization" value-field="organization">
                <field-map field-name="partyId" from="organizationPartyId"/></entity-find-one>
            <set field="errorGlJournalId" value="${organizationPartyId}Error"/>
            <service-call name="create#mantle.ledger.transaction.GlJournal"
                    in-map="[organizationPartyId:organizationPartyId, glJournalId:errorGlJournalId,
                        glJournalTypeEnumId:'GLJRNL_ERROR', isPosted:'N',
                        glJournalName:('Error Journal for ' + (organization?.organizationName ?: organizationPartyId))]"/>

            <!-- copy the mantle.ledger.config.PartyAcctgPreference -->
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="sourcePartyAcctgPreference">
                <field-map field-name="organizationPartyId" from="sourcePartyId"/>
            </entity-find-one>
            <if condition="!sourcePartyAcctgPreference"><return error="true" message="Could not find PartyAcctgPreference for source party [${sourcePartyId}]"/></if>
            <set field="partyAcctgPreference" from="sourcePartyAcctgPreference.cloneValue()"/>
            <entity-set value-field="partyAcctgPreference" include="nonpk" set-if-empty="false"/>
            <service-call name="create#mantle.ledger.config.PartyAcctgPreference"
                    in-map="partyAcctgPreference + [organizationPartyId:organizationPartyId, errorGlJournalId:errorGlJournalId]"/>

            <!-- copy mantle.ledger.account.GlAccountOrganization -->
            <entity-find entity-name="mantle.ledger.account.GlAccountOrganization" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.AssetTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.AssetTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record">
                <set field="record.organizationPartyId" from="organizationPartyId"/>
                <set field="record.assetTypeGlAccountId" from="null"/>
                <entity-sequenced-id-primary value-field="record"/>
                <entity-create value-field="record"/>
            </iterate>

            <!-- copy mantle.ledger.config.GlAccountTypeDefault -->
            <entity-find entity-name="mantle.ledger.config.GlAccountTypeDefault" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.InvoiceTypeTransType -->
            <entity-find entity-name="mantle.ledger.config.InvoiceTypeTransType" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.ItemTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.ItemTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.PaymentTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.PaymentTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.PaymentMethodTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.PaymentMethodTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.FinancialAccountTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.FinancialAccountTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>
            <!-- copy mantle.ledger.config.FinancialAccountReasonGlAccount -->
            <entity-find entity-name="mantle.ledger.config.FinancialAccountReasonGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- TODO: CreditCardTypeGlAccount, GlAccountTypePartyDefault, ProductCategoryGlAccount, ProductGlAccount, TaxAuthorityGlAccount, VarianceReasonGlAccount -->

            <!-- setup mantle.party.time.TimePeriod for FiscalMonth, FiscalQuarter, FiscalYear -->
            <service-call name="mantle.ledger.LedgerServices.check#NextFiscalTimePeriods"
                    in-map="[organizationPartyId:organizationPartyId]"/>
        </actions>
    </service>

    <service verb="find" noun="PartyAcctgPreference">
        <description>Get the PartyAcctgPreference record for the specified organizationPartyId and if not found find
            record for ancestor organization(s).</description>
        <in-parameters><parameter name="organizationPartyId" required="true"/></in-parameters>
        <out-parameters><parameter name="partyAcctgPreference" type="EntityValue"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference" cache="true">
                <field-map field-name="organizationPartyId"/></entity-find-one>

            <if condition="!partyAcctgPreference">
                <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList" cache="true">
                    <date-filter/>
                    <econdition field-name="fromPartyId" from="organizationPartyId"/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/>
                    <econdition field-name="fromRoleTypeId" value="OrgInternal"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                </entity-find>
                <if condition="partyRelationshipList">
                    <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                            in-map="[organizationPartyId:partyRelationshipList[0].toPartyId]"/>
                </if>
            </if>
        </actions>
    </service>
    <service verb="find" noun="RootGlAccountClassEnum">
        <in-parameters><parameter name="glAccountClassEnumId"/></in-parameters>
        <out-parameters><parameter name="rootGlAccountClassEnumId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumValue" cache="true">
                <field-map field-name="enumId" from="glAccountClassEnumId"/>
            </entity-find-one>
            <if condition="enumValue.parentEnumId">
                <service-call name="mantle.ledger.LedgerServices.find#RootGlAccountClassEnum" out-map="context"
                        in-map="[glAccountClassEnumId:enumValue.parentEnumId]"/>
                <else>
                    <set field="rootGlAccountClassEnumId" from="glAccountClassEnumId"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="expand" noun="ParentOrganizationList">
        <in-parameters><parameter name="organizationPartyId" required="true"/></in-parameters>
        <out-parameters><parameter name="orgPartyIdList" type="List"/></out-parameters>
        <actions>
            <set field="orgPartyIdList" from="[organizationPartyId]"/>

            <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList" cache="true">
                <date-filter/>
                <econdition field-name="fromPartyId" from="organizationPartyId"/>
                <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/>
                <econdition field-name="fromRoleTypeId" value="OrgInternal"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/>
            </entity-find>
            <iterate list="partyRelationshipList" entry="partyRelationship">
                <service-call name="mantle.ledger.LedgerServices.expand#ParentOrganizationList" out-map="expandResult"
                        in-map="[organizationPartyId:partyRelationship.toPartyId]"/>
                <script>orgPartyIdList.addAll(expandResult.orgPartyIdList)</script>
            </iterate>
        </actions>
    </service>
    <service verb="expand" noun="ChildOrganizationList">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="onlyWithNoAcctgPreference" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters><parameter name="orgPartyIdList" type="List"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference" cache="true">
                <field-map field-name="organizationPartyId"/></entity-find-one>
            <if condition="onlyWithNoAcctgPreference &amp;&amp; partyAcctgPreference">
                <then><set field="orgPartyIdList" from="[]"/></then>
                <else><set field="orgPartyIdList" from="[organizationPartyId]"/></else>
            </if>

            <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList" cache="true">
                <date-filter/>
                <econdition field-name="toPartyId" from="organizationPartyId"/>
                <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/>
                <econdition field-name="fromRoleTypeId" value="OrgInternal"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/>
            </entity-find>
            <iterate list="partyRelationshipList" entry="partyRelationship">
                <if condition="onlyWithNoAcctgPreference">
                    <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference" cache="true">
                        <field-map field-name="organizationPartyId" from="partyRelationship.fromPartyId"/></entity-find-one>
                    <if condition="partyAcctgPreference"><continue/></if>
                </if>
                <service-call name="mantle.ledger.LedgerServices.expand#ChildOrganizationList" out-map="expandResult"
                        in-map="[organizationPartyId:partyRelationship.fromPartyId, onlyWithNoAcctgPreference:onlyWithNoAcctgPreference]"/>
                <script>orgPartyIdList.addAll(expandResult.orgPartyIdList)</script>
            </iterate>
        </actions>
    </service>
    <service verb="get" noun="OrganizationFiscalTimePeriods">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="filterDate" type="Timestamp"/>
            <parameter name="timePeriodTypeId"/>
        </in-parameters>
        <out-parameters><parameter name="timePeriodList" type="List"/></out-parameters>
        <actions>
            <!-- NOTE: this one is not recursive, should really have TimePeriod associated with root parent org so just one will match -->
            <set field="filterSqlDate" from="filterDate ? new java.sql.Date(filterDate.time) : null"/>
            <entity-find entity-name="mantle.party.time.TimePeriodAndType" list="timePeriodList">
                <!-- doesn't work as needed with date fields (only date-time): <date-filter valid-date="filterSqlDate" ignore-if-empty="true"/> -->
                <econdition field-name="fromDate" operator="less-equals" from="filterSqlDate"/>
                <econdition field-name="thruDate" operator="greater-equals" from="filterSqlDate"/>
                <econdition field-name="periodPurposeEnumId" value="Fiscal" ignore="timePeriodTypeId"/>
                <econdition field-name="partyId" from="organizationPartyId"/>
                <econdition field-name="timePeriodTypeId" ignore-if-empty="true"/>
            </entity-find>

            <if condition="!timePeriodList">
                <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList" cache="true">
                    <date-filter/>
                    <econdition field-name="fromPartyId" from="organizationPartyId"/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/>
                    <econdition field-name="fromRoleTypeId" value="OrgInternal"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                </entity-find>
                <if condition="partyRelationshipList">
                    <service-call name="mantle.ledger.LedgerServices.get#OrganizationFiscalTimePeriods" out-map="context"
                            in-map="[organizationPartyId:partyRelationshipList[0].toPartyId, filterDate:filterDate,
                                timePeriodTypeId:timePeriodTypeId]"/>
                </if>
            </if>
        </actions>
    </service>

    <service verb="get" noun="DefaultGlAccountByType">
        <in-parameters>
            <parameter name="glAccountTypeEnumId" required="true"/>
            <!-- <parameter name="acctgTransTypeEnumId" required="true"/> -->
            <parameter name="organizationPartyId" required="true"/>
            <!-- <parameter name="otherPartyId"/> -->
        </in-parameters>
        <out-parameters>
            <parameter name="glAccountId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.ledger.config.GlAccountTypeDefault" list="glAccountTypeDefaultList" cache="true">
                <econdition field-name="organizationPartyId"/>
                <econdition field-name="glAccountTypeEnumId"/>
            </entity-find>
            <set field="glAccountId" from="glAccountTypeDefaultList.first?.glAccountId"/>

            <if condition="!glAccountId">
                <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList" cache="true">
                    <date-filter/>
                    <econdition field-name="fromPartyId" from="organizationPartyId"/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/>
                    <econdition field-name="fromRoleTypeId" value="OrgInternal"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                </entity-find>
                <if condition="partyRelationshipList">
                    <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="context"
                            in-map="[organizationPartyId:partyRelationshipList[0].toPartyId,
                                glAccountTypeEnumId:glAccountTypeEnumId]"/>
                </if>
            </if>
        </actions>
    </service>

    <!-- Manual Accounting Transaction services -->
    <service verb="create" noun="AcctgTrans">
        <in-parameters>
            <auto-parameters entity-name="mantle.ledger.transaction.AcctgTrans" include="nonpk">
                <exclude field-name="isPosted"/><exclude field-name="postedDate"/></auto-parameters>
            <parameter name="acctgTransTypeEnumId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="transactionDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="amountUomId" default-value="USD"/>
            <parameter name="glFiscalTypeEnumId" default-value="GLFT_ACTUAL"/>
        </in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <set field="isPosted" value="N"/>
            <service-call name="create#mantle.ledger.transaction.AcctgTrans" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="AcctgTrans">
        <in-parameters>
            <parameter name="acctgTransId" required="true"/>
            <auto-parameters entity-name="mantle.ledger.transaction.AcctgTrans" include="nonpk">
                <exclude field-name="isPosted"/><exclude field-name="postedDate"/></auto-parameters>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans" value-field="acctgTrans" for-update="true"/>
            <if condition="acctgTrans.isPosted == 'Y'"><return error="true" message="Cannot update transaction [${acctgTransId}], already posted."/></if>
            <service-call name="update#mantle.ledger.transaction.AcctgTrans" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="AcctgTransEntry">
        <in-parameters>
            <parameter name="acctgTransId" required="true"/>
            <parameter name="acctgTrans" type="EntityValue"/>
            <auto-parameters entity-name="mantle.ledger.transaction.AcctgTransEntry" include="nonpk"/>
            <parameter name="debitCreditFlag" required="true"/>
            <parameter name="amount" type="BigDecimal" required="true"/>
            <!-- allow setting this to be deferred <parameter name="glAccountId" required="true"/> -->
            <parameter name="reconcileStatusId" default-value="AES_NOT_RECONCILED"/>
            <parameter name="isSummary" default-value="N"/>
        </in-parameters>
        <out-parameters><parameter name="acctgTransEntrySeqId"/></out-parameters>
        <actions>
            <if condition="!acctgTrans"><entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans" value-field="acctgTrans" for-update="true"/></if>
            <if condition="acctgTrans.isPosted == 'Y'"><return error="true" message="Cannot create entry for transaction [${acctgTransId}], already posted."/></if>
            <if condition="amount &lt; 0">
                <!-- if negative abs the amount and reverse the debit/credit flag -->
                <set field="amount" from="amount.abs()"/>
                <set field="debitCreditFlag" from="debitCreditFlag == 'D' ? 'C' : 'D'"/>
            </if>
            <service-call name="create#mantle.ledger.transaction.AcctgTransEntry" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="AcctgTransEntry">
        <in-parameters>
            <parameter name="acctgTransId" required="true"/>
            <parameter name="acctgTransEntrySeqId" required="true"/>
            <auto-parameters entity-name="mantle.ledger.transaction.AcctgTransEntry" include="nonpk"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans" value-field="acctgTrans" for-update="true"/>
            <if condition="acctgTrans.isPosted == 'Y'"><return error="true" message="Cannot update entry for transaction [${acctgTransId}], already posted."/></if>
            <service-call name="update#mantle.ledger.transaction.AcctgTransEntry" in-map="context"/>
        </actions>
    </service>
    <service verb="delete" noun="AcctgTransEntry">
        <in-parameters>
            <parameter name="acctgTransId" required="true"/>
            <parameter name="acctgTransEntrySeqId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans" value-field="acctgTrans" for-update="true"/>
            <if condition="acctgTrans.isPosted == 'Y'"><return error="true" message="Cannot delete entry for transaction [${acctgTransId}], already posted."/></if>
            <service-call name="delete#mantle.ledger.transaction.AcctgTransEntry" in-map="context"/>
        </actions>
    </service>

    <!-- Accounting Transaction (AcctgTrans) Posting Services -->
    <service verb="calculate" noun="AcctgTransTrialBalance">
        <description>Add up debits and credits for an AcctgTrans and get the difference.</description>
        <in-parameters><parameter name="acctgTransId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="debitTotal" type="BigDecimal"/>
            <parameter name="creditTotal" type="BigDecimal"/>
            <parameter name="debitCreditDifference" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.ledger.transaction.AcctgTransEntry" list="acctgTransEntryList">
                <econdition field-name="acctgTransId"/>
                <order-by field-name="acctgTransEntrySeqId"/>
            </entity-find>
            <set field="debitTotal" from="0"/>
            <set field="creditTotal" from="0"/>
            <iterate entry="acctgTransEntry" list="acctgTransEntryList">
                <if condition="acctgTransEntry.debitCreditFlag == 'D'">
                    <then><set field="debitTotal" from="debitTotal + acctgTransEntry.amount"/></then>
                    <else><set field="creditTotal" from="creditTotal + acctgTransEntry.amount"/></else>
                </if>
            </iterate>

            <set field="debitCreditDifference" from="debitTotal - creditTotal"/>
        </actions>
    </service>
    <service verb="post" noun="AcctgTrans">
        <description>Posts an Accounting Transaction (AcctgTrans) after verifying it is ready for posting (with
            verify#AcctgTrans service).</description>
        <in-parameters>
            <parameter name="acctgTransId" required="true"/>
            <parameter name="verifyOnly" type="Boolean" default-value="false"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans" value-field="acctgTrans" for-update="true"/>

            <!-- make sure the AcctgTrans has not already been posted -->
            <if condition="acctgTrans.isPosted == 'Y'">
                <return error="true" message="Not posting transaction [${acctgTransId}], already posted."/></if>

            <set field="useErrorJournal" from="false"/>

            <!-- check the scheduled posting date, but only if it's set -->
            <if condition="acctgTrans.scheduledPostingDate != null &amp;&amp; ec.user.nowTimestamp.before(acctgTrans.scheduledPostingDate)">
                <message>Not posting transaction [${acctgTransId}], before scheduled posting date.</message>
                <set field="useErrorJournal" from="true"/>
            </if>

            <!-- check trial balance -->
            <service-call name="mantle.ledger.LedgerServices.calculate#AcctgTransTrialBalance" out-map="context"
                    in-map="[acctgTransId:acctgTransId]"/>
            <if condition="debitTotal != creditTotal">
                <message>Not posting transaction [${acctgTransId}], credit total (${creditTotal}) and debit total (${debitTotal}) not equal.</message>
                <set field="useErrorJournal" from="true"/>
            </if>

            <!-- do a for-update query on each GlAccount, make sure accounts allow posting -->
            <set field="glAccountById" from="[:]"/>
            <entity-find entity-name="mantle.ledger.transaction.AcctgTransEntry" list="acctgTransEntryList">
                <econdition field-name="acctgTransId"/>
                <order-by field-name="acctgTransEntrySeqId"/>
            </entity-find>
            <iterate list="acctgTransEntryList" entry="acctgTransEntry">
                <set field="glAccount" from="glAccountById.get(acctgTransEntry.glAccountId)"/>
                <if condition="!glAccount">
                    <entity-find-one entity-name="mantle.ledger.account.GlAccount" value-field="glAccount" for-update="true">
                        <field-map field-name="glAccountId" from="acctgTransEntry.glAccountId"/></entity-find-one>
                    <script>glAccountById.put(acctgTransEntry.glAccountId, glAccount)</script>
                </if>

                <if condition="glAccount.disallowPosting == 'Y'">
                    <message>GL Account ${glAccount.glAccountId} does not allow posting</message>
                    <log level="info" message="In AcctgTransEntry [${acctgTransId}:${acctgTransEntry.acctgTransEntrySeqId}] GL Account ${glAccount.glAccountId} does not allow posting"/>
                    <set field="useErrorJournal" from="true"/>
                </if>
            </iterate>

            <if condition="useErrorJournal">
                <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                        in-map="[organizationPartyId:acctgTrans.organizationPartyId]"/>
                <if condition="partyAcctgPreference?.errorGlJournalId">
                    <service-call name="update#mantle.ledger.transaction.AcctgTrans"
                            in-map="[acctgTransId:acctgTransId, glJournalId:partyAcctgPreference.errorGlJournalId]"/>
                    <message>Accounting transaction [${acctgTransId}] has been saved in the Error Journal [${partyAcctgPreference.errorGlJournalId}].</message>
                    <return/>

                    <!-- if no errorGlJournalId return error -->
                    <else><return error="true" message="No error journal, returning error instead"/></else>
                </if>
            </if>

            <!-- get current period(s) and check if closed (also include parent organizations) -->
            <service-call name="mantle.ledger.LedgerServices.get#OrganizationFiscalTimePeriods" out-map="context"
                    in-map="[organizationPartyId:acctgTrans.organizationPartyId, filterDate:acctgTrans.transactionDate]"/>
            <if condition="!timePeriodList">
                <message error="true">Not posting transaction [${acctgTransId}], could not find time period.</message>
            </if>
            <!-- lock each time period and make sure it's not closed -->
            <iterate entry="timePeriodFromList" list="timePeriodList">
                <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod" for-update="true">
                    <field-map field-name="timePeriodId" from="timePeriodFromList.timePeriodId"/></entity-find-one>
                <if condition="timePeriod.isClosed == 'Y'">
                    <message error="true">Not posting transaction [${acctgTransId}], time period closed ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}.</message>
                </if>
            </iterate>

            <!-- make sure the glAccountId and amount fields are set -->
            <iterate entry="acctgTransEntry" list="acctgTransEntryList">
                <if condition="!acctgTransEntry.glAccountId">
                    <message error="true">Accounting transaction [${acctgTransId}] entry [${acctgTransEntry.acctgTransEntrySeqId}] has no glAccountId.</message>
                </if>
                <if condition="acctgTransEntry.amount == null">
                    <message error="true">Accounting transaction [${acctgTransId}] entry [${acctgTransEntry.acctgTransEntrySeqId}] has no amount.</message>
                </if>
            </iterate>

            <if condition="verifyOnly">
                <if condition="!ec.message.hasError()">
                    <message>Accounting transaction [${acctgTransId}] is verified for posting.</message>
                </if>
                <return/>
            </if>

            <if condition="ec.message.hasError()">
                <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                        in-map="[organizationPartyId:acctgTrans.organizationPartyId]"/>
                <if condition="partyAcctgPreference?.errorGlJournalId">
                    <service-call name="update#mantle.ledger.transaction.AcctgTrans"
                            in-map="[acctgTransId:acctgTransId, glJournalId:partyAcctgPreference.errorGlJournalId]"/>
                    <message>Accounting transaction [${acctgTransId}] has been saved in the Error Journal [${partyAcctgPreference.errorGlJournalId}].</message>
                    <script>ec.message.clearErrors()</script>
                    <return/>

                    <!-- if not errorGlJournalId return errors -->
                    <else><check-errors/></else>
                </if>
            </if>


            <!-- for each entry update posted balance -->
            <iterate list="acctgTransEntryList" entry="acctgTransEntry">
                <!-- have already iterated through the entry list once, all GlAccount records should be there -->
                <set field="glAccount" from="glAccountById.get(acctgTransEntry.glAccountId)"/>

                <entity-find-one entity-name="mantle.ledger.account.GlAccountOrganization" value-field="glAccountOrganization" for-update="true">
                    <field-map field-name="glAccountId" from="acctgTransEntry.glAccountId"/>
                    <field-map field-name="organizationPartyId" from="acctgTrans.organizationPartyId"/>
                </entity-find-one>
                <if condition="!glAccountOrganization">
                    <entity-make-value entity-name="mantle.ledger.account.GlAccountOrganization" value-field="glAccountOrganization"
                            map="[glAccountId:acctgTransEntry.glAccountId,  organizationPartyId:acctgTrans.organizationPartyId]"/>
                </if>

                <!-- Debits add to debit accounts and subtract from credit accounts. Credits add to credit accounts and subtract from debit accounts. -->
                <set field="postingAmount" from="0.0"/>
                <service-call name="mantle.ledger.LedgerServices.find#RootGlAccountClassEnum" out-map="context"
                        in-map="[glAccountClassEnumId:glAccount.glAccountClassEnumId]"/>

                <if condition="rootGlAccountClassEnumId == 'DEBIT'">
                    <set field="postingAmount" from="acctgTransEntry.debitCreditFlag == 'D' ? acctgTransEntry.amount : -acctgTransEntry.amount"/>
                </if>
                <if condition="rootGlAccountClassEnumId == 'CREDIT'">
                    <set field="postingAmount" from="acctgTransEntry.debitCreditFlag == 'D' ? -acctgTransEntry.amount : acctgTransEntry.amount"/>
                </if>

                <!-- TODO: do anything with RESOURCE or potentially other root GL account classes? -->

                <set field="glAccount.postedBalance" from="(glAccount.postedBalance ?: 0) + postingAmount"/>
                <entity-update value-field="glAccount"/>
                <set field="glAccountOrganization.postedBalance" from="(glAccountOrganization.postedBalance ?: 0) + postingAmount"/>
                <entity-create value-field="glAccountOrganization" or-update="true"/>
                
                
                <!-- create or update GlAccountHistory records -->
                <iterate list="timePeriodList" entry="timePeriod">
                    <entity-find-one entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" value-field="glAccountOrgTimePeriod" for-update="true">
                        <field-map field-name="glAccountId" from="acctgTransEntry.glAccountId"/>
                        <field-map field-name="organizationPartyId" from="acctgTrans.organizationPartyId"/>
                        <field-map field-name="timePeriodId" from="timePeriod.timePeriodId"/>
                    </entity-find-one>
                    <if condition="glAccountOrgTimePeriod == null">
                        <entity-make-value entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" value-field="glAccountOrgTimePeriod"
                            map="[glAccountId:acctgTransEntry.glAccountId,  organizationPartyId:acctgTrans.organizationPartyId,
                                timePeriodId:timePeriod.timePeriodId]"/>
                    </if>

                    <if condition="acctgTransEntry.debitCreditFlag == 'D'">
                        <set field="glAccountOrgTimePeriod.postedDebits" from="(glAccountOrgTimePeriod.postedDebits ?: 0) + acctgTransEntry.amount"/>
                        <else><set field="glAccountOrgTimePeriod.postedCredits" from="(glAccountOrgTimePeriod.postedCredits ?: 0) + acctgTransEntry.amount"/></else>
                    </if>
                    <set field="glAccountOrgTimePeriod.endingBalance" from="(glAccountOrgTimePeriod.endingBalance ?: 0) + postingAmount"/>

                    <entity-create value-field="glAccountOrgTimePeriod" or-update="true"/>
                </iterate>
            </iterate>

            <check-errors/>

            <!-- do the actual posting: set isPosted to Y and postedDate to now on AcctgTrans, use the EntityValue we already found -->
            <set field="acctgTrans.isPosted" value="Y"/>
            <set field="acctgTrans.postedDate" from="ec.user.nowTimestamp"/>
            <entity-update value-field="acctgTrans"/>
        </actions>
    </service>

    <service verb="post" noun="ReverseAcctgTrans">
        <description>Create a new transaction that is the reverse of the original (for each entry debits to credit and
            vice versa, transaction date set to now, etc).Clones the original transaction so new one will be associated
            with the same invoice, payment, etc.</description>
        <in-parameters><parameter name="acctgTransId" required="true"/></in-parameters>
        <out-parameters><parameter name="acctgTransId" required="true"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans" value-field="acctgTrans"/>

            <if condition="acctgTrans.isPosted != 'Y'">
                <return error="true" message="Not reversing transaction [${acctgTransId}], transaction is not posted"/></if>

            <entity-find entity-name="mantle.ledger.transaction.AcctgTransEntry" list="acctgTransEntryList">
                <econdition field-name="acctgTransId"/>
                <order-by field-name="acctgTransEntrySeqId"/>
            </entity-find>

            <set field="reverseAcctgTrans" from="acctgTrans.clone()"/>
            <set field="reverseAcctgTrans.acctgTransId" from="null"/>
            <entity-sequenced-id-primary value-field="reverseAcctgTrans"/>
            <set field="reverseAcctgTrans.transactionDate" from="ec.user.nowTimestamp"/>
            <set field="reverseAcctgTrans.isPosted" value="N"/>
            <entity-create value-field="reverseAcctgTrans"/>

            <set field="reverseAcctgTransId" from="reverseAcctgTrans.acctgTransId"/>

            <set field="useErrorJournal" from="false"/>
            <iterate list="acctgTransEntryList" entry="acctgTransEntry">
                <set field="reverseAcctgTransEntry" from="acctgTransEntry.clone()"/>
                <set field="reverseAcctgTransEntry.acctgTransId" from="reverseAcctgTransId"/>
                <set field="reverseAcctgTransEntry.reconcileStatusId" value="AES_NOT_RECONCILED"/>
                <set field="reverseAcctgTransEntry.debitCreditFlag"
                        from="reverseAcctgTransEntry.debitCreditFlag == 'C' ? 'D' : 'C'"/>
                <entity-create value-field="reverseAcctgTransEntry"/>

                <if condition="!reverseAcctgTransEntry.glAccountId"><set field="useErrorJournal" from="true"/></if>
            </iterate>

            <if condition="useErrorJournal">
                <!-- put in the error journal for the org -->
                <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                        in-map="[organizationPartyId:acctgTrans.organizationPartyId]"/>
                <if condition="partyAcctgPreference?.errorGlJournalId">
                    <service-call name="update#mantle.ledger.transaction.AcctgTrans"
                            in-map="[acctgTransId:reverseAcctgTrans.acctgTransId,
                                glJournalId:partyAcctgPreference.errorGlJournalId]"/>
                </if>

                <else>
                    <!-- call the post service -->
                    <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans" in-map="[acctgTransId:reverseAcctgTransId]"/>
                </else>
            </if>

            <set field="acctgTransId" from="reverseAcctgTransId"/>
        </actions>
    </service>
    <service verb="move" noun="AcctgTransEntry">
        <description>Move a transaction entry from one account to another by posting a transaction reversing the original
            for just the given entry and redoing the original transaction in the other account. Clones the original
            transaction so new one will be associated with the same invoice, payment, etc.</description>
        <in-parameters>
            <parameter name="acctgTransId" required="true"/>
            <parameter name="acctgTransEntrySeqId" required="true"/>
            <parameter name="glAccountId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="acctgTransId" required="true"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans" value-field="acctgTrans"/>
            <entity-find-one entity-name="mantle.ledger.transaction.AcctgTransEntry" value-field="acctgTransEntry"/>

            <if condition="acctgTrans.isPosted != 'Y'">
                <return error="true" message="Not moving transaction entry [${acctgTransId}:${acctgTransEntrySeqId}], transaction is not posted"/></if>
            <if condition="acctgTransEntry.glAccountId == glAccountId">
                <return message="Not moving transaction entry [${acctgTransId}:${acctgTransEntrySeqId}], entry is already posted to account ${glAccountId}"/></if>

            <set field="reverseAcctgTrans" from="acctgTrans.clone()"/>
            <set field="reverseAcctgTrans.acctgTransId" from="null"/>
            <entity-sequenced-id-primary value-field="reverseAcctgTrans"/>
            <set field="reverseAcctgTrans.transactionDate" from="ec.user.nowTimestamp"/>
            <set field="reverseAcctgTrans.isPosted" value="N"/>
            <entity-create value-field="reverseAcctgTrans"/>

            <set field="reverseAcctgTransId" from="reverseAcctgTrans.acctgTransId"/>

            <!-- reverse the original entry -->
            <set field="reverseAcctgTransEntry" from="acctgTransEntry.clone()"/>
            <set field="reverseAcctgTransEntry.acctgTransId" from="reverseAcctgTransId"/>
            <set field="reverseAcctgTransEntry.reconcileStatusId" value="AES_NOT_RECONCILED"/>
            <set field="reverseAcctgTransEntry.debitCreditFlag"
                    from="reverseAcctgTransEntry.debitCreditFlag == 'C' ? 'D' : 'C'"/>
            <entity-create value-field="reverseAcctgTransEntry"/>

            <!-- create new entry in new account -->
            <set field="newAcctgTransEntry" from="acctgTransEntry.clone()"/>
            <set field="newAcctgTransEntry.acctgTransId" from="reverseAcctgTransId"/>
            <set field="newAcctgTransEntry.reconcileStatusId" value="AES_NOT_RECONCILED"/>
            <set field="newAcctgTransEntry.glAccountId" from="glAccountId"/>
            <set field="newAcctgTransEntry.acctgTransEntrySeqId" from="null"/>
            <entity-sequenced-id-secondary value-field="newAcctgTransEntry"/>
            <entity-create value-field="newAcctgTransEntry"/>

            <!-- call the post service -->
            <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans" in-map="[acctgTransId:reverseAcctgTransId]"/>

            <set field="acctgTransId" from="reverseAcctgTransId"/>
        </actions>
    </service>

    <!-- Financial TimePeriod services -->
    <service verb="check" noun="NextFiscalTimePeriods">
        <description>
            Ensure that at least current and next TimePeriods exist for FiscalMonth, FiscalQuarter (3 months), FiscalYear.
            If no time periods exist creates fiscal time periods based on calendar (ie fiscal year matches calendar year).
            If time periods do exist but not next time periods, adds next time period starting next day after current.
            This should be run once per month to ensure the next time period exists.
        </description>
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="basisDate" type="java.sql.Date" default="new java.sql.Date(ec.user.nowTimestamp.time)"/>
        </in-parameters>
        <actions>
            <script>basisCal = ec.user.getCalendarSafe(); basisCal.setTime(basisDate)</script>
            <entity-find-one entity-name="mantle.party.Organization" value-field="organization">
                <field-map field-name="partyId" from="organizationPartyId"/></entity-find-one>

            <!-- start with FiscalYear and go down so we have parentPeriodId -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="currentYearList"><date-filter valid-date="new Timestamp(basisDate.time)"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalYear"/></entity-find>
            <if condition="!currentYearList">
                <!-- no current year... assume fiscal year is calendar year and create one automatically -->
                <script>yearFromCal = basisCal.clone(); yearFromCal.set(Calendar.DAY_OF_YEAR, 1)</script>
                <script>yearThruCal = basisCal.clone(); yearThruCal.set(Calendar.DAY_OF_YEAR, yearThruCal.getActualMaximum(Calendar.DAY_OF_YEAR))</script>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[timePeriodTypeId:'FiscalYear', partyId:organizationPartyId,
                            periodNum:yearFromCal.get(Calendar.YEAR), beginningBalance:0, endingBalance:0,
                            periodName:(organization.organizationName + ' ' + yearFromCal.get(Calendar.YEAR)),
                            fromDate:new java.sql.Date(yearFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(yearThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="yearPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>yearFromCal = ec.user.getCalendarSafe(); yearFromCal.setTime(currentYearList.first.fromDate)</script>
                    <script>yearThruCal = ec.user.getCalendarSafe(); yearThruCal.setTime(currentYearList.first.thruDate)</script>
                    <set field="yearPeriodId" from="currentYearList.first.timePeriodId"/>
                </else>
            </if>

            <!-- current quarter -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="currentQuarterList"><date-filter valid-date="new Timestamp(basisDate.time)"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalQuarter"/></entity-find>
            <if condition="!currentQuarterList">
                <!-- no current quarter... assume fiscal year is calendar year with 4 3-month quarters and create one automatically -->
                <script>quarterNumber = (int) (basisCal.get(Calendar.MONTH)/3)</script>
                <script>quarterFromCal = basisCal.clone(); quarterFromCal.set(Calendar.MONTH, (quarterNumber * 3)); quarterFromCal.set(Calendar.DAY_OF_MONTH, 1)</script>
                <script>quarterThruCal = basisCal.clone(); quarterThruCal.set(Calendar.MONTH, ((quarterNumber + 1) * 3)); quarterThruCal.set(Calendar.DAY_OF_MONTH, 1); quarterThruCal.add(Calendar.DAY_OF_YEAR, -1)</script>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[parentPeriodId:yearPeriodId, timePeriodTypeId:'FiscalQuarter', partyId:organizationPartyId,
                            periodNum:(quarterNumber + 1), beginningBalance:0, endingBalance:0,
                            periodName:(organization.organizationName + ' ' + quarterFromCal.get(Calendar.YEAR) + 'Q' + (quarterNumber + 1)),
                            fromDate:new java.sql.Date(quarterFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(quarterThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="quarterPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>quarterFromCal = ec.user.getCalendarSafe(); quarterFromCal.setTime(currentQuarterList.first.fromDate)</script>
                    <script>quarterThruCal = ec.user.getCalendarSafe(); quarterThruCal.setTime(currentQuarterList.first.thruDate)</script>
                    <set field="quarterPeriodId" from="currentQuarterList.first.timePeriodId"/>
                </else>
            </if>

            <!-- current month -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="currentMonthList"><date-filter valid-date="new Timestamp(basisDate.time)"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalMonth"/></entity-find>
            <if condition="!currentMonthList">
                <!-- no current quarter... assume fiscal year is calendar year with 4 3-month quarters and create one automatically -->
                <script>monthNumber = basisCal.get(Calendar.MONTH)</script>
                <script>monthFromCal = basisCal.clone(); monthFromCal.set(Calendar.DAY_OF_MONTH, 1)</script>
                <script>monthThruCal = basisCal.clone(); monthThruCal.set(Calendar.DAY_OF_MONTH, basisCal.getActualMaximum(Calendar.DAY_OF_MONTH))</script>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[parentPeriodId:quarterPeriodId, timePeriodTypeId:'FiscalMonth', partyId:organizationPartyId,
                            periodNum:monthNumber+1, beginningBalance:0, endingBalance:0,
                            periodName:(organization.organizationName + ' ' + monthFromCal.get(Calendar.YEAR) + '-' + (monthNumber + 1)),
                            fromDate:new java.sql.Date(monthFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(monthThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="monthPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>monthFromCal = ec.user.getCalendarSafe(); monthFromCal.setTime(currentMonthList.first.fromDate)</script>
                    <script>monthThruCal = ec.user.getCalendarSafe(); monthThruCal.setTime(currentMonthList.first.thruDate)</script>
                    <set field="monthPeriodId" from="currentMonthList.first.timePeriodId"/>
                </else>
            </if>

            <!-- next year -->
            <!-- based on current year see if next exists and if not add one starting the day after and one year long -->
            <script>nextYearFromCal = yearFromCal.clone(); nextYearFromCal.add(Calendar.YEAR, 1); nextYearFromCal.getTimeInMillis()</script>
            <entity-find entity-name="mantle.party.time.TimePeriod" list="nextYearList"><date-filter valid-date="new Timestamp(nextYearFromCal.getTimeInMillis())"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalYear"/></entity-find>
            <if condition="!nextYearList">
                <script>nextYearThruCal = yearThruCal.clone(); nextYearThruCal.add(Calendar.YEAR, 1); nextYearThruCal.add(Calendar.DAY_OF_MONTH, 5); nextYearThruCal.set(Calendar.DAY_OF_MONTH, 1); nextYearThruCal.add(Calendar.DAY_OF_MONTH, -1); nextYearThruCal.getTimeInMillis()</script>
                <set field="nextYearPeriodName" value="${organization.organizationName} ${nextYearFromCal.get(Calendar.YEAR)}"/>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[previousPeriodId:yearPeriodId, timePeriodTypeId:'FiscalYear', partyId:organizationPartyId,
                            beginningBalance:0, endingBalance:0, periodNum:nextYearFromCal.get(Calendar.YEAR),
                            periodName:nextYearPeriodName, fromDate:new java.sql.Date(nextYearFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(nextYearThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="nextYearPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>nextYearFromCal = ec.user.getCalendarSafe(); nextYearFromCal.setTime(nextYearList.first.fromDate)</script>
                    <script>nextYearThruCal = ec.user.getCalendarSafe(); nextYearThruCal.setTime(nextYearList.first.thruDate)</script>
                    <set field="nextYearPeriodId" from="nextYearList.first.timePeriodId"/>
                </else>
            </if>

            <!-- next quarter, may be in current or next year -->
            <script>nextQuarterFromCal = quarterFromCal.clone(); nextQuarterFromCal.add(Calendar.MONTH, 3); nextQuarterFromCal.add(Calendar.DAY_OF_MONTH, 5); nextQuarterFromCal.set(Calendar.DAY_OF_MONTH, 1); nextQuarterFromCal.getTimeInMillis()</script>
            <entity-find entity-name="mantle.party.time.TimePeriod" list="nextQuarterList"><date-filter valid-date="new Timestamp(nextQuarterFromCal.getTimeInMillis())"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalQuarter"/></entity-find>
            <if condition="!nextQuarterList">
                <set field="parentPeriodId" from="(nextQuarterFromCal.getTimeInMillis() &lt; yearThruCal.getTimeInMillis()) ? yearPeriodId : nextYearPeriodId"/>
                <script>nextQuarterThruCal = quarterThruCal.clone(); nextQuarterThruCal.add(Calendar.MONTH, 3); nextQuarterThruCal.add(Calendar.DAY_OF_MONTH, 5); nextQuarterThruCal.set(Calendar.DAY_OF_MONTH, 1); nextQuarterThruCal.add(Calendar.DAY_OF_MONTH, -1); nextQuarterThruCal.getTimeInMillis()</script>
                <script>nextQuarterNumber = (int) (nextQuarterFromCal.get(Calendar.MONTH)/3)</script>
                <set field="nextQuarterPeriodName" value="${organization.organizationName} ${nextQuarterFromCal.get(Calendar.YEAR)}Q${nextQuarterNumber + 1}"/>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[parentPeriodId:parentPeriodId, previousPeriodId:quarterPeriodId,
                            timePeriodTypeId:'FiscalQuarter', partyId:organizationPartyId, beginningBalance:0,
                            endingBalance:0, periodNum:nextQuarterNumber+1, periodName:nextQuarterPeriodName,
                            fromDate:new java.sql.Date(nextQuarterFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(nextQuarterThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="nextQuarterPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>nextQuarterFromCal = ec.user.getCalendarSafe(); nextQuarterFromCal.setTime(nextQuarterList.first.fromDate)</script>
                    <script>nextQuarterThruCal = ec.user.getCalendarSafe(); nextQuarterThruCal.setTime(nextQuarterList.first.thruDate)</script>
                    <set field="nextQuarterPeriodId" from="nextQuarterList.first.timePeriodId"/>
                </else>
            </if>

            <!-- next month, may be in current or next quarter -->
            <script>nextMonthFromCal = monthFromCal.clone(); nextMonthFromCal.add(Calendar.MONTH, 1); nextMonthFromCal.add(Calendar.DAY_OF_MONTH, 5); nextMonthFromCal.set(Calendar.DAY_OF_MONTH, 1); nextMonthFromCal.getTimeInMillis()</script>
            <entity-find entity-name="mantle.party.time.TimePeriod" list="nextMonthList"><date-filter valid-date="new Timestamp(nextMonthFromCal.getTimeInMillis())"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalMonth"/></entity-find>
            <if condition="!nextMonthList">
                <set field="parentPeriodId" from="(nextMonthFromCal.getTimeInMillis() &lt; quarterThruCal.getTimeInMillis()) ? quarterPeriodId : nextQuarterPeriodId"/>
                <script>nextMonthNumber = nextMonthFromCal.get(Calendar.MONTH)</script>
                <script>nextMonthThruCal = monthThruCal.clone(); nextMonthThruCal.add(Calendar.MONTH, 1); nextMonthThruCal.add(Calendar.DAY_OF_MONTH, 5); nextMonthThruCal.set(Calendar.DAY_OF_MONTH, 1); nextMonthThruCal.add(Calendar.DAY_OF_MONTH, -1); nextMonthThruCal.getTimeInMillis()</script>
                <set field="nextMonthPeriodName" value="${organization.organizationName} ${nextMonthFromCal.get(Calendar.YEAR)}-${nextMonthNumber + 1}"/>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[parentPeriodId:parentPeriodId, previousPeriodId:monthPeriodId,
                            timePeriodTypeId:'FiscalMonth', partyId:organizationPartyId, beginningBalance:0,
                            endingBalance:0, periodNum:nextMonthNumber+1, periodName:nextMonthPeriodName,
                            fromDate:new java.sql.Date(nextMonthFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(nextMonthThruCal.getTimeInMillis()), isClosed:'N']"/>

                <else>
                    <!-- this the last set, nothing will use these but leaving as a placeholder in case this is expanded:
                    <script>nextMonthFromCal = ec.user.getCalendarSafe(); nextMonthFromCal.setTime(nextMonthList.first.fromDate)</script>
                    <script>nextMonthThruCal = ec.user.getCalendarSafe(); nextQuarterThruCal.setTime(nextQuarterList.first.thruDate)</script>
                    -->
                </else>
            </if>
        </actions>
    </service>
    <service verb="close" noun="FinancialTimePeriod">
        <in-parameters><parameter name="timePeriodId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod" for-update="true"/>

            <if condition="timePeriod.isClosed == 'Y'">
                <message error="true">Not closing period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, already closed.</message>
            </if>

            <if condition="ec.user.nowTimestamp.before(timePeriod.thruDate)">
                <message error="true">Not closing period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, period has not ended (ends on ${timePeriod.thruDate}).</message>
            </if>

            <!-- if any child periods make sure they are closed -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="childTimePeriodList">
                <econdition field-name="parentPeriodId" from="timePeriodId"/>
            </entity-find>
            <iterate list="childTimePeriodList" entry="childTimePeriod">
                <if condition="childTimePeriod.isClosed != 'Y'">
                    <message error="true">Not closing period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, child period ${ec.resource.expand('TimePeriodNameTemplate','',childTimePeriod)} not closed.</message>
                </if>
            </iterate>

            <!-- make sure there are no unposted transactions within the time period -->
            <set field="fromTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.fromDate} 00:00:00.000&quot;, '')"/>
            <set field="thruTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.thruDate} 23:59:59.999&quot;, '')"/>
            <entity-find-count entity-name="mantle.ledger.transaction.AcctgTrans" count-field="unpostedTransCount">
                <econdition field-name="isPosted" operator="not-equals" value="Y" or-null="true"/>
                <econdition field-name="transactionDate" operator="greater-equals" from="fromTimestamp"/>
                <econdition field-name="transactionDate" operator="less-equals" from="thruTimestamp"/>
            </entity-find-count>
            <if condition="unpostedTransCount &gt; 0">
                <message error="true">Not closing period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, found ${unpostedTransCount} in period.</message>
            </if>

            <!-- check errors before continuing -->
            <check-errors/>

            <!-- first close the TimePeriod to avoid further postings -->
            <set field="timePeriod.isClosed" value="Y"/>
            <entity-update value-field="timePeriod"/>

            <!-- TODO: data cleanup including recaclc postedBalance on this and next TimePeriod and GlAccountOrgTimePeriod -->
            <!-- TODO: check total debits and credits for all accounts, post adjusting entries (only if configured to do so?) -->

            <!-- find the next TimePeriod and update beginningBalance and endingBalance (should just be one) -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="nextTimePeriodList" for-update="true">
                <econdition field-name="previousPeriodId" from="timePeriodId"/>
            </entity-find>
            <if condition="nextTimePeriodList">
                <set field="nextTimePeriod" from="nextTimePeriodList.first"/>
                <set field="nextTimePeriod.beginningBalance" from="timePeriod.endingBalance"/>
                <!-- add endingBalance to both just in case something has already been posted and added to next endingBalance -->
                <set field="nextTimePeriod.endingBalance" from="nextTimePeriod.endingBalance + timePeriod.endingBalance"/>
                <entity-update value-field="nextTimePeriod"/>

                <else>
                    <!-- TODO: do something if there is no next time period, like create one? really should already be there just in case tx'es have posted already... -->
                </else>
            </if>
        </actions>
    </service>

    <!-- GL Journal Services -->
    <service verb="create" noun="GlJournal">
        <in-parameters>
            <auto-parameters include="nonpk"><exclude field-name="isPosted"/><exclude field-name="postedDate"/></auto-parameters>
            <parameter name="glJournalName" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="glJournalId"/></out-parameters>
        <actions>
            <set field="isPosted" value="N"/>
            <service-call name="create#mantle.ledger.transaction.GlJournal" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="GlJournal">
        <in-parameters>
            <parameter name="glJournalId" required="true"/>
            <auto-parameters include="nonpk"><exclude field-name="isPosted"/><exclude field-name="postedDate"/></auto-parameters>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.ledger.transaction.GlJournal" in-map="context"/>
        </actions>
    </service>

    <!-- is this even needed for anything?
    <service verb="calculate" noun="GlJournalTrialBalance">
        <in-parameters><parameter name="glJournalId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="debitTotal" type="BigDecimal"/>
            <parameter name="creditTotal" type="BigDecimal"/>
            <parameter name="debitCreditDifference" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!- - implement this...? - ->
        </actions>
    </service>
    -->
    <service verb="post" noun="GlJournal">
        <description>Posts a GL Journal (GlJournal) by posting each transaction (AcctgTrans) in the journal.</description>
        <in-parameters>
            <parameter name="glJournalId" required="true"/>
            <parameter name="closeJournal" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <!-- lock the Journal first -->
            <entity-find-one entity-name="mantle.ledger.transaction.GlJournal" value-field="glJournal" for-update="true"/>

            <entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="acctgTransList">
                <econdition field-name="glJournalId"/><order-by field-name="acctgTransId"/>
            </entity-find>
            <set field="txPostCount" from="0"/>
            <iterate list="acctgTransList" entry="acctgTrans">
                <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans"
                        in-map="[acctgTransId:acctgTrans.acctgTransId]"/>
                <if condition="ec.message.hasError()">
                    <return error="true"/>
                    <else><set field="txPostCount" from="txPostCount + 1"/></else>
                </if>
            </iterate>
            <message>Posted ${txPostCount} transactions</message>

            <if condition="closeJournal">
                <set field="glJournal.isPosted" value="Y"/>
                <set field="glJournal.postedDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="glJournal"/>
            </if>
        </actions>
    </service>
</services>
