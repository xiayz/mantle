<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <service verb="get" noun="PartyPaymentMethodInfo">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="paymentMethodId"/>
            <parameter name="paymentMethodTypeEnumId" default-value="PmtCreditCard"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentMethodId"/>
            <parameter name="paymentMethod" type="EntityValue"/>
            <parameter name="creditCard" type="EntityValue"/>
            <parameter name="creditCardTypeEnum" type="EntityValue"/>
            <parameter name="expireMonth"/><parameter name="expireYear"/>
            <parameter name="maskedCardNumber"/>
            <parameter name="postalContactMechId"/>
            <parameter name="postalAddress" type="EntityValue"/>
            <parameter name="postalAddressStateGeo" type="EntityValue"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="telecomNumber" type="EntityValue"/>
            <parameter name="emailContactMechId"/>
            <parameter name="emailAddress"/>
        </out-parameters>
        <actions>
            <if condition="paymentMethodId">
                <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>

                <else>
                    <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList">
                        <date-filter/>
                        <econdition field-name="ownerPartyId" from="partyId"/>
                        <econdition field-name="paymentMethodTypeEnumId"/>
                        <order-by field-name="-fromDate"/><!-- get the most recent one if there is more than one -->
                    </entity-find>
                    <set field="paymentMethod" from="paymentMethodList.first"/>
                </else>
            </if>
            <set field="paymentMethodId" from="paymentMethod?.paymentMethodId"/>

            <entity-find-related-one value-field="paymentMethod" relationship-name="mantle.account.method.CreditCard" to-value-field="creditCard"/>
            <entity-find-related-one value-field="creditCard" relationship-name="CreditCardType#moqui.basic.Enumeration" to-value-field="creditCardTypeEnum"/>

            <set field="expireMonth" from="creditCard?.expireDate ? creditCard.expireDate.substring(0, creditCard.expireDate.indexOf('/')) : null"/>
            <set field="expireYear" from="creditCard?.expireDate ? creditCard.expireDate.substring(creditCard.expireDate.indexOf('/')+1) : null"/>

            <set field="cardNumber" from="creditCard?.cardNumber"/>
            <set field="maskedCardNumber" from="cardNumber ? (creditCard.creditCardTypeEnumId == 'CctAmericanExpress' ? '***********' : '************') + cardNumber.substring(cardNumber.length() - 4, cardNumber.length()) : ''"/>

            <!-- TODO: support other payment method types! -->

            <set field="postalContactMechId" from="paymentMethod?.postalContactMechId"/>
            <entity-find-related-one value-field="paymentMethod" relationship-name="mantle.party.contact.PostalAddress" to-value-field="postalAddress"/>
            <entity-find-related-one value-field="postalAddress" relationship-name="StateProvince#moqui.basic.Geo" to-value-field="postalAddressStateGeo"/>
            <set field="telecomContactMechId" from="paymentMethod?.telecomContactMechId"/>
            <entity-find-related-one value-field="paymentMethod" relationship-name="mantle.party.contact.TelecomNumber" to-value-field="telecomNumber"/>

            <entity-find-related-one value-field="paymentMethod" relationship-name="Email#mantle.party.contact.ContactMech" to-value-field="emailContactMech"/>
            <set field="emailContactMechId" from="paymentMethod?.emailContactMechId"/>
            <set field="emailAddress" from="emailContactMech?.infoString"/>
        </actions>
    </service>
    <service verb="get" noun="PartyPaymentMethodInfoList">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="paymentMethodTypeEnumId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="methodInfoList" type="List"><parameter name="infoMap">
                <parameter name="paymentMethodId"/>
                <parameter name="paymentMethod" type="EntityValue"/>
                <parameter name="creditCard" type="EntityValue"/>
                <parameter name="creditCardTypeEnum" type="EntityValue"/>
                <parameter name="expireMonth"/><parameter name="expireYear"/>
                <parameter name="maskedCardNumber"/>
                <parameter name="postalContactMechId"/>
                <parameter name="postalAddress" type="EntityValue"/>
                <parameter name="postalAddressStateGeo" type="EntityValue"/>
                <parameter name="telecomContactMechId"/>
                <parameter name="telecomNumber" type="EntityValue"/>
                <parameter name="emailContactMechId"/>
                <parameter name="emailAddress"/>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="PaymentMethod" list="paymentMethodList">
                <date-filter/>
                <econdition field-name="ownerPartyId" from="partyId"/>
                <econdition field-name="paymentMethodTypeEnumId" ignore-if-empty="true"/>
                <order-by field-name="-fromDate"/><!-- get the most recent one if there is more than one -->
            </entity-find>

            <set field="methodInfoList" from="[]"/>
            <iterate list="paymentMethodList" entry="paymentMethod">
                <entity-find-related-one value-field="paymentMethod" relationship-name="mantle.account.method.CreditCard" to-value-field="creditCard"/>
                <entity-find-related-one value-field="creditCard" relationship-name="CreditCardType#moqui.basic.Enumeration" to-value-field="creditCardTypeEnum"/>

                <set field="expireMonth" from="creditCard?.expireDate ? creditCard.expireDate.substring(0, creditCard.expireDate.indexOf('/')) : null"/>
                <set field="expireYear" from="creditCard?.expireDate ? creditCard.expireDate.substring(creditCard.expireDate.indexOf('/')+1) : null"/>

                <set field="cardNumber" from="creditCard?.cardNumber"/>
                <set field="maskedCardNumber" from="cardNumber ? (creditCard.creditCardTypeEnumId == 'CctAmericanExpress' ? '***********' : '************') + cardNumber.substring(cardNumber.length() - 4, cardNumber.length()) : ''"/>

                <!-- TODO: support other payment method types! -->

                <entity-find-related-one value-field="paymentMethod" relationship-name="mantle.party.contact.PostalAddress" to-value-field="postalAddress"/>
                <entity-find-related-one value-field="postalAddress" relationship-name="StateProvince#moqui.basic.Geo" to-value-field="postalAddressStateGeo"/>
                <entity-find-related-one value-field="paymentMethod" relationship-name="mantle.party.contact.TelecomNumber" to-value-field="telecomNumber"/>
                <entity-find-related-one value-field="paymentMethod" relationship-name="Email#mantle.party.contact.ContactMech" to-value-field="emailContactMech"/>

                <script>methodInfoList.add([paymentMethodId:paymentMethod.paymentMethodId, paymentMethod:paymentMethod,
                                                creditCard:creditCard, creditCardTypeEnum:creditCardTypeEnum,
                                                expireMonth:expireMonth, expireYear:expireYear, maskedCardNumber:maskedCardNumber,
                                                postalContactMechId:paymentMethod?.postalContactMechId,
                                                postalAddress:postalAddress, postalAddressStateGeo:postalAddressStateGeo,
                                                telecomContactMechId:paymentMethod?.telecomContactMechId,
                                                telecomNumber:telecomNumber,
                                                emailContactMechId:paymentMethod?.emailContactMechId,
                                                emailAddress:emailContactMech?.infoString])</script>
            </iterate>
        </actions>
    </service>

    <service verb="store" noun="PaymentMethodInfo">
        <in-parameters>
            <parameter name="partyId" required="true"/>

            <parameter name="paymentMethodId"/>
            <parameter name="paymentMethodTypeEnumId" default-value="PmtCreditCard"/>

            <auto-parameters entity-name="mantle.account.method.CreditCard" include="nonpk">
                <exclude field-name="cardNumberLookupHash"/><exclude field-name="consecutiveFailedAuths"/>
                <exclude field-name="lastFailedAuthDate"/><exclude field-name="consecutiveFailedNsf"/>
                <exclude field-name="lastFailedNsfDate"/>
            </auto-parameters>
            <parameter name="cardNumber"><credit-card/></parameter><!-- not required because often empty on update, ie for public facing masked cards -->
            <parameter name="expireMonth" required="true"/>
            <parameter name="expireYear" required="true"/>
            <parameter name="expireDate" default-value="${expireMonth}/${expireYear}">
                <time-range after="now" format="MM/yyyy"/></parameter>

            <parameter name="postalContactMechId"/>
            <parameter name="postalContactMechPurposeId" default-value="PostalBilling"/>
            <auto-parameters entity-name="mantle.party.contact.PostalAddress" include="nonpk"/>
            <parameter name="toName" default-value="${firstNameOnCard} ${lastNameOnCard}"/>

            <parameter name="telecomContactMechId"/>
            <parameter name="telecomContactMechPurposeId" default-value="PhoneBilling"/>
            <auto-parameters entity-name="mantle.party.contact.TelecomNumber" include="nonpk"/>
            <parameter name="areaCode"><text-digits/></parameter>
            <parameter name="contactNumber"><matches regexp="^\d\d[-\. \d]*\d\d$" message="Please enter a valid phone number"/></parameter>

            <parameter name="emailContactMechId"/>
            <parameter name="emailContactMechPurposeId" default-value="EmailBilling"/>
            <parameter name="emailAddress"><text-email/></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentMethodId"/>
            <parameter name="postalContactMechId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="emailContactMechId"/>
        </out-parameters>
        <actions>
            <if condition="paymentMethodId">
                <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>
                <if condition="!postalContactMechId"><set field="postalContactMechId" from="paymentMethod.postalContactMechId"/></if>
                <if condition="!telecomContactMechId"><set field="telecomContactMechId" from="paymentMethod.telecomContactMechId"/></if>
                <if condition="!emailContactMechId"><set field="emailContactMechId" from="paymentMethod.emailContactMechId"/></if>
            </if>

            <service-call name="mantle.party.ContactServices.store#PartyContactInfo" in-map="context" out-map="context"/>

            <!-- update PaymentMethod last so we know new postalContactMechId and telecomContactMechId updates (if applicable) -->
            <if condition="paymentMethodId">
                <!-- TODO: support other payment method types! -->
                <service-call name="mantle.account.PaymentMethodServices.update#CreditCard" in-map="context" out-map="ccOut"/>

                <else>
                    <service-call name="mantle.account.PaymentMethodServices.create#CreditCard" in-map="context" out-map="ccOut">
                        <field-map field-name="ownerPartyId" from="ec.user.userAccount.partyId"/>
                    </service-call>
                </else>
            </if>
            <set field="paymentMethodId" from="ccOut?.paymentMethodId ?: paymentMethodId"/>
        </actions>
    </service>

    <!-- CreditCard Services -->
    <service verb="create" noun="CreditCard">
        <description>
            Create a Credit Card (and the corresponding PaymentMethod record).
        </description>
        <in-parameters>
            <auto-parameters entity-name="CreditCard" include="nonpk"/>
            <parameter name="expireDate" required="true"><time-range after="now" format="MM/yyyy"/></parameter>
            <parameter name="cardNumber" required="true"><credit-card/></parameter>

            <!-- some fields from PaymentMethod we'll allow setting manually -->
            <parameter name="ownerPartyId"/>
            <parameter name="description"/>
            <parameter name="postalContactMechId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="trustLevelEnumId"/>
            <parameter name="paymentFraudEvidenceId"/>
        </in-parameters>
        <out-parameters><parameter name="paymentMethodId" required="true"/></out-parameters>
        <actions>
            <set field="ownerPartyId" from="ownerPartyId ?: ec.user.userAccount.partyId"/>

            <if condition="!description">
                <entity-find-one entity-name="moqui.basic.Enumeration" value-field="creditCardTypeEnum">
                    <field-map field-name="enumId" from="creditCardTypeEnumId"/>
                </entity-find-one>
                <set field="cardNumberDisplay" from="cardNumber ? (creditCardTypeEnumId == 'CctAmericanExpress' ? '***********' : '************') + cardNumber.substring(cardNumber.length() - 4, cardNumber.length()) : ''"/>
                <set field="description" from="(creditCardTypeEnum?.description ?: 'Credit Card') + ' ' + cardNumberDisplay"/>
            </if>
            <entity-make-value entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>
            <entity-set value-field="paymentMethod" include="nonpk"/>
            <entity-sequenced-id-primary value-field="paymentMethod"/>
            <set field="paymentMethod.fromDate" from="ec.user.nowTimestamp"/>
            <set field="paymentMethod.paymentMethodTypeEnumId" value="PmtCreditCard"/>
            <set field="paymentMethod.originalPaymentMethodId" from="paymentMethod.paymentMethodId"/>
            <entity-create value-field="paymentMethod"/>

            <entity-make-value entity-name="mantle.account.method.CreditCard" value-field="creditCard"/>
            <set field="creditCard.paymentMethodId" from="paymentMethod.paymentMethodId"/>
            <entity-set value-field="creditCard" include="nonpk"/>
            <entity-create value-field="creditCard"/>

            <set field="result.paymentMethodId" from="paymentMethod.paymentMethodId"/>
        </actions>
    </service>
    <service verb="update" noun="CreditCard">
        <description>
            Update a Credit Card for a Party. CreditCard is immutable, so this creates a new one and associates
            it with the Party, expiring the old one (if there are any changes).

            NOTE: if you want to update the PaymentMethod.paymentFraudEvidenceId or .trustLevelEnumId fields, do so
            directly on the PaymentMethod entity (do not use this service).
        </description>
        <in-parameters>
            <auto-parameters entity-name="CreditCard" include="nonpk"/>

            <parameter name="paymentMethodId" required="true"/>
            <!-- some fields from PaymentMethod we'll allow setting manually -->
            <parameter name="ownerPartyId"/>
            <parameter name="description"/>
            <parameter name="postalContactMechId"/>
            <parameter name="telecomContactMechId"/>
        </in-parameters>
        <out-parameters><parameter name="paymentMethodId" required="true"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.method.CreditCard" value-field="origCreditCard"/>
            <script>newCreditCard = origCreditCard.cloneValue()</script>
            <entity-set value-field="newCreditCard" include="nonpk"/>

            <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="origPaymentMethod"/>
            <script>newPaymentMethod = origPaymentMethod.cloneValue()</script>
            <entity-set value-field="newPaymentMethod" include="nonpk"/>

            <if condition="newCreditCard == origCreditCard &amp;&amp; newPaymentMethod == origPaymentMethod">
                <log level="info" message="No fields were different for Credit Card with ID [${paymentMethodId}], not updating."/>
                <return error="false"/>
            </if>

            <!-- expire the old record -->
            <set field="origPaymentMethod.thruDate" from="ec.user.nowTimestamp"/>
            <entity-update value-field="origPaymentMethod"/>

            <!-- create the new records -->
            <set field="newPaymentMethod.paymentMethodId" from="null"/>
            <entity-sequenced-id-primary value-field="newPaymentMethod"/>
            <set field="newPaymentMethod.fromDate" from="ec.user.nowTimestamp"/>
            <set field="newPaymentMethod.originalPaymentMethodId" from="origPaymentMethod.originalPaymentMethodId ?: origPaymentMethod.paymentMethodId"/>
            <if condition="!newPaymentMethod.description">
                <entity-find-one entity-name="moqui.basic.Enumeration" value-field="creditCardTypeEnum">
                    <field-map field-name="enumId" from="creditCardTypeEnumId"/>
                </entity-find-one>
                <set field="cardNumberDisplay" from="cardNumber ? (creditCardTypeEnumId == 'CctAmericanExpress' ? '***********' : '************') + cardNumber.substring(cardNumber.length() - 4, cardNumber.length()) : ''"/>
                <set field="newPaymentMethod.description" from="(creditCardTypeEnum?.description ?: 'Credit Card') + ' ' + cardNumberDisplay"/>
            </if>
            <entity-create value-field="newPaymentMethod"/>

            <set field="newCreditCard.paymentMethodId" from="newPaymentMethod.paymentMethodId"/>
            <entity-create value-field="newCreditCard"/>

            <set field="result.paymentMethodId" from="newPaymentMethod.paymentMethodId"/>
        </actions>
    </service>
    <service verb="delete" noun="CreditCard">
        <description>This does an actual delete to remove credit card information from the system. It will delete the
            record with the specified ID and all cloned records back to the original (because of the clone on update
            to make immutable).</description>
        <in-parameters><parameter name="paymentMethodId"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>
            <entity-find entity-name="mantle.account.method.PaymentMethod" list="pmList">
                <econdition field-name="originalPaymentMethodId" from="paymentMethod.originalPaymentMethodId"/>
            </entity-find>

            <iterate list="pmList" entry="pmValue">
                <service-call name="delete#mantle.account.method.CreditCard" in-map="[paymentMethodId:pmValue.paymentMethodId]"/>
                <service-call name="delete#mantle.account.method.PaymentMethod" in-map="[paymentMethodId:pmValue.paymentMethodId]"/>
            </iterate>

            <!-- if the original record doesn't have originalPaymentMethodId populated it won't have been deleted above -->
            <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="origPm">
                <field-map field-name="paymentMethodId" from="paymentMethod.originalPaymentMethodId"/></entity-find-one>
            <if condition="origPm">
                <service-call name="delete#mantle.account.method.CreditCard" in-map="[paymentMethodId:origPm.paymentMethodId]"/>
                <service-call name="delete#mantle.account.method.PaymentMethod" in-map="[paymentMethodId:origPm.paymentMethodId]"/>
            </if>
        </actions>
    </service>
</services>
